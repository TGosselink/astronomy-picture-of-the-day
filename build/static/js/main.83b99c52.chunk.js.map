{"version":3,"sources":["components/DateInput.js","components/Photo.js","App.js","serviceWorker.js","index.js"],"names":["DateInput","props","react_default","a","createElement","DayPickerInput_default","value","date","onDayChange","changeDate","onClick","handleClick","Photo","photo","title","src","url","alt","explanation","App","state","Date","getPhoto","fetch","concat","then","response","json","photoData","_this","setState","getRandomDate","start","end","getTime","Math","random","formatDate","moment","year","getFullYear","month","getMonth","day","getDate","dateFromInput","_ref","selected","randomDate","_this2","this","components_DateInput","components_Photo","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8PAgBeA,SAXG,SAAAC,GAAK,OACrBC,EAAAC,EAAAC,cAAA,4BAEEF,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CACIG,MAAOL,EAAMM,KACbC,YAAaP,EAAMQ,aAEvBP,EAAAC,EAAAC,cAAA,UAAQM,QAAST,EAAMU,aAAvB,mBCFWC,EARD,SAAAX,GAAK,OACfC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAKH,EAAMY,MAAMC,OACjBZ,EAAAC,EAAAC,cAAA,OAAKW,IAAKd,EAAMY,MAAMG,IAAKC,IAAKhB,EAAMY,MAAMC,QAC5CZ,EAAAC,EAAAC,cAAA,SAAIH,EAAMY,MAAMK,eCyDPC,6MAvDbC,MAAQ,CACNb,KAAM,IAAIc,KACVR,MAAO,MAGTS,SAAW,SAAAf,GACTgB,MAAK,4CAAAC,OAA6CjB,EAA7C,sDACFkB,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GAAS,OAAIC,EAAKC,SAAS,CAAEjB,MAAOe,SAI9CG,cAAgB,SAACC,EAAOC,GACtB,OAAO,IAAIZ,KAAKW,EAAME,UAAYC,KAAKC,UAAYH,EAAIC,UAAYF,EAAME,eAG3EG,WAAa,SAAAC,GACX,IAAIC,EAAOD,EAAOE,cACdC,EAAQH,EAAOI,WAAa,EAC5BC,EAAML,EAAOM,UACjB,SAAApB,OAAUe,EAAV,KAAAf,OAAkBiB,EAAlB,KAAAjB,OAA2BmB,MAG7BlC,WAAa,SAACoC,EAADC,GAAiCA,EAAfC,SAC7BlB,EAAKC,SAAS,CAAEvB,KAAMsC,IACtBhB,EAAKP,SAASO,EAAKQ,WAAWQ,OAShClC,YAAc,WACZ,IAAIqC,EAAanB,EAAKE,cAAc,IAAIV,KAAK,KAAM,EAAG,IAAK,IAAIA,MAC/DQ,EAAKC,SAAS,CAAEvB,KAAMyC,IACtBnB,EAAKP,SAASO,EAAKQ,WAAWW,wFATZ,IAAAC,EAAAC,KAClB3B,MAAK,wFACFE,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAE,GAAI,OAAIsB,EAAKnB,SAAS,CAAEjB,MAAOc,uCAUvC,OACEzB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,iDACAF,EAAAC,EAAAC,cAAA,uCACCF,EAAAC,EAAAC,cAAC+C,EAAD,CACC1C,WAAYyC,KAAKzC,WACjBF,KAAM2C,KAAK9B,MAAMb,KACjBI,YAAauC,KAAKvC,cAEpBT,EAAAC,EAAAC,cAACgD,EAAD,CAAOvC,MAAOqC,KAAK9B,MAAMP,gBApDfwC,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1D,EAAAC,EAAAC,cAACyD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzC,KAAK,SAAA0C,GACjCA,EAAaC","file":"static/js/main.83b99c52.chunk.js","sourcesContent":["//DateInput.js\r\nimport React from \"react\";\r\nimport DayPickerInput from 'react-day-picker/DayPickerInput';\r\nimport 'react-day-picker/lib/style.css';\r\n\r\nconst DateInput = props => (\r\n  <div>\r\n    Select a Date:\r\n    <DayPickerInput\r\n        value={props.date}\r\n        onDayChange={props.changeDate}\r\n    />\r\n    <button onClick={props.handleClick}>Random photo</button>\r\n  </div>\r\n);\r\n\r\nexport default DateInput;","import React from \"react\";\r\n\r\nconst Photo = props => (\r\n    <div>\r\n      <h3>{props.photo.title}</h3>\r\n      <img src={props.photo.url} alt={props.photo.title} />\r\n      <p>{props.photo.explanation}</p>\r\n    </div>\r\n);\r\n\r\nexport default Photo;\r\n","//App.js\nimport React, { Component } from \"react\";\n\nimport DateInput from \"./components/DateInput\";\nimport Photo from \"./components/Photo.js\";\n\nclass App extends Component {\n  \n  state = {\n    date: new Date(),\n    photo: \"\"\n  };\n\n  getPhoto = date => {\n    fetch(`https://api.nasa.gov/planetary/apod?date=${date}&api_key=Tf2aLTCvTbKvWE9WpIhbwK3Zx09ORZ8BBBHhOrpd`)\n      .then(response => response.json())\n      .then(photoData => this.setState({ photo: photoData }));\n  };\n\n\n  getRandomDate = (start, end) => {\n    return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));\n  }\n\n  formatDate = moment => {\n    let year = moment.getFullYear();\n    let month = moment.getMonth() + 1;\n    let day = moment.getDate();\n    return `${year}-${month}-${day}`;\n  }\n\n  changeDate = (dateFromInput, { selected }) => {\n    this.setState({ date: dateFromInput });\n    this.getPhoto(this.formatDate(dateFromInput));\n  };\n\n  componentDidMount() {\n    fetch(`https://api.nasa.gov/planetary/apod?api_key=Tf2aLTCvTbKvWE9WpIhbwK3Zx09ORZ8BBBHhOrpd`)\n      .then(response => response.json())\n      .then(json => this.setState({ photo: json }));\n  }\n\n  handleClick = () => {\n    let randomDate = this.getRandomDate(new Date(1995, 6, 16), new Date());\n    this.setState({ date: randomDate });\n    this.getPhoto(this.formatDate(randomDate));\n  }\n\n  render() {\n    return (\n      <div>\n        <h2>NASA's Astronomy Picture of the Day</h2>\n        <p>Provided by Theo Gosselink</p>\n         <DateInput\n          changeDate={this.changeDate}\n          date={this.state.date}\n          handleClick={this.handleClick}\n         />\n        <Photo photo={this.state.photo} />\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}